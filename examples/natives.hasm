#native alloc 0
#native free 1
#native print_f64 4
#native print_ptr 5
#native dump_memory 6
#native write 7

#const print_memory "******************************"

swap8:
	;; put ret at the bottom of the stack
	swap 2
	dup 1
	dup 1

	read8
	swap 1
	read8

	dup 2
	swap 1
	write8

	dup 2
	swap 1
	write8

	drop
	drop

	ret

reverse:
	swap 2
	swap 1
	dup 0
	push 2
	divi

	reverse_loop:
		dup 0
		push 0
		eqi
		jmp_if reverse_loop_end

		dup 2
		dup 2
		push 1
		minusi
		dup 1
		plusi
		call swap8

		push 1
		minusi

		swap 1
		push 2
	   	minusi
		swap 1

		swap 2
	   	push 1
	   	plusi
		swap 2

		jmp reverse_loop
	reverse_loop_end:

	drop
	drop
	drop

	ret

print_positive:
	;; put ret at the bottom of the stack
	swap 1
	push print_memory

	print_positive_loop:
		;; x = x % 10 + '0'
		dup 1
		push 10
		modu
		push '0'
		plusi

		;; write x in memory
		dup 1
		swap 1
		write8

		;; print_memory += 1
		push 1
		plusi

		;; x = x / 10
		swap 1
		push 10
		divu
		swap 1

		;; x == 0
		dup 1
		push 0
		equ
		not
		jmp_if print_positive_loop

	push print_memory
	minusi
	dup 0
	push print_memory
	swap 1
	call reverse

	push print_memory
	swap 1
	native write

	drop

	ret

dump_i64:
    	swap 1
    	dup 0
	push 0
    	gei
    	jmp_if dump_i64_skip_negation
       		push print_memory
       		push '-'
       		write8

       		push print_memory
       		push 1
       		native write

       		push -1
       		multi
    		dump_i64_skip_negation:

    	call print_positive

    	push print_memory
	push 10
    	write8

	push print_memory
    	push 1
    	native write

    	ret

dump_u64:
    	swap 1
    	call print_positive

    	push print_memory
    	push 10
    	write8

    	push print_memory
    	push 1
    	native write

	ret
